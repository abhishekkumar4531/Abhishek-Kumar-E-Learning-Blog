{% extends 'base.html.twig' %}

{% block title %}Python | Programming
{% endblock %}

{% block body %}
	<div class="subLinks">
		<ul>
			<li><a href="#subContent">Material</a></li>
			<li><a href="#blogContent">Blogs</a></li>
			<li><a href="#faqContent">FAQ</a></li>
		</ul>
	</div>
	<div class="blogContent" id="blogContent">
		<div class="m-5 mb-1 w-75">
			<h1>Welcome to the Python programming</h1>
			<div class="">
				{% if decription is defined %}
					{{ decription }}
				{% endif %}
			</div>
		</div>
		<div class="m-5 mt-3 mb-1 w-75 pb-1">
			{% if courseBlogging is defined %}
				<h5 class="text-primary p-1">
					<span class="bi bi-pen"></span>
					Latest blog on Python language</h5>
				{% for details in courseBlogging %}
					<div class="blogInfo mb-3 pb-2">
						<div class="blogContent">
							<div class="contentDesc">
								{{details.contentDesc}}
							</div>
							<h6 class="pt-2">Author of this blog :
								{{details.authorName}}</h6>
						</div>

						<div class="blogFile">
							<div>
								{% if details.fileType is same as("video/mp4") %}
									<video width="100%" height="200" controls>
										<source src="/{{details.contentFile}}" type="video/mp4">
									</video>

								{% elseif details.fileType is same as("audio/mpeg") %}
									<audio controls>
										<source src="/{{details.contentFile}}" type="audio/mpeg">
										Your browser does not support the audio element.
									</audio>

								{% else %}
									<img src="/{{details.contentFile}}" alt="" width="300" height="200">

								{% endif %}
							</div>
							<div>
								<a href="{{details.contentLink}}">Use fulll link</a>
							</div>
						</div>
					</div>
				{% endfor %}
			{% endif %}
		</div>
	</div>
	<div class="subContent m-3" id="subContent">
		<div>
			<div class="contentData m-3 ms-5 w-100">
				<h5 class="p-1">
					<span class="bi bi-book"></span>
					You can find below basic and important notes</h5>
				<div class="col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content" id="mainContent">

					<h3 class = "text-primary">Python Tutorial</h3>

					<p>This Python tutorial has been written for the beginners to help them understand the basic to advanced concepts of Python Programming Language. After completing this tutorial, you will find yourself at a great level of expertise in Python, from where you can take yourself to the next levels to become a world class Software Engineer.</p>

					<h3>What is Python?</h3>
					<p>
						<b>Python</b>
						is a very popular general-purpose interpreted, interactive, object-oriented, and high-level programming language. Python is dynamically-typed and garbage-collected programming language. It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under the GNU General Public License (GPL).</p>
					<blockquote>Python supports multiple programming paradigms, including Procedural, Object Oriented and Functional programming language. Python design philosophy emphasizes code readability with the use of significant indentation.</blockquote>
					<p>This tutorial gives a complete understanding of Python programming language starting from basic conceopts to advanced concepts. This tutorial will take you through simple and practical approaches while learning Python Programming language.</p>
					<h2>Python Jobs</h2>
					<p>Today, Python is very high in demand and all the major companies are looking for great Python Programmers to develop websites, software components, and applications or to work with Data Science, AI, and ML technologies. When we are developing this tutorial in 2022, there is a high shortage of Python Programmers where as market demands more number of Python Programmers due to it's application in Machine Learning, Artificial Intelligence etc.</p>
					<p>Today a Python Programmer with 3-5 years of experience is asking for around $150,000 annual package and this is the most demanding programming language in America. Though it can vary depending on the location of the Job. It's impossible to list all of the companies using Python, to name a few big companies are:</p>
					<ul>
						<li>Google</li>
						<li>Intel</li>
						<li>NASA</li>
						<li>PayPal</li>
						<li>Facebook</li>
						<li>IBM</li>
						<li>Amazon</li>
						<li>Netflix</li>
						<li>Pinterest</li>
						<li>Uber</li>
						<li>Many more...</li>
					</ul>
					<p>So, you could be the next potential employee for any of these major companies. We have developed a great learning material for you to learn Python Programming which will help you prepare for the technical interviews and certification exams based on Python. So, start learning Python using this simple and effective tutorial from anywhere and anytime absolutely at your pace.</p>
					<h2>Why to Learn Python?</h2>
					<p>Python is consistently rated as one of the world's most popular programming languages. Python is fairly easy to learn,  so if you are starting to learn any programming language then Python could be your great choice. Today various Schools, Colleges and Universities are teaching Python as their primary programming language. There are many other good reasons which makes Python as the top choice of any programmer:</p>
					<ul>
						<li>Python is Open Source which means its available free of cost.</li>
						<li>Python is simple and so easy to learn</li>
						<li>Python is versatile and can be used to create many different things.</li>
						<li>Python has powerful development libraries include AI, ML etc.</li>
						<li>Python is much in demand and ensures high salary</li>
					</ul>
					<p>
						<b>Python</b>
						is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning Python:</p>
					<ul>
						<li>
							<b>Python is Interpreted</b>
							− Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.</li>
						<li>
							<b>Python is Interactive</b>
							− You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.</li>
						<li>
							<b>Python is Object-Oriented</b>
							− Python supports Object-Oriented style or technique of programming that encapsulates code within objects.</li>
						<li>
							<b>Python is a Beginner's Language</b>
							− Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.</li>
					</ul>
					<h2>Python Online Compiler/Interpreter</h2>
					<p>We have provided
						<b>Python Online Compiler/Interpreter</b>
						which helps you  to
						<b>Edit</b>
						and
						<b>Execute</b>
						the code directly from your browser. Try to click the icon
						<img class="run-button" src="/images/run-button.png" alt="run button">
						to run the following Python code to print conventional "Hello, World!".</p>
					<blockquote>Below code box allows you to change the value of the code. Try to change the value inside
						<b>print()</b>
						and run it again to verify the result.</blockquote>
					<pre class="demo-code notranslate  language-python" data-lang="python" data-index="0" id="0" tabindex="0"><div class="execute"></div><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token comment"># This is my first Python program.</span>
    <span class="token comment"># This will print 'Hello, World!' as the output</span>

    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </div><div class="output-wrapper"><div class="console-close"></div><div class="code-output"></div></div></pre>
					<h2>Careers with Python</h2>
					<p>If you know Python nicely, then you have a great career ahead. Here are just a few of the career options where Python is a key skill:</p>
					<ul>
						<li>Game developer</li>
						<li>Web designer</li>
						<li>Python developer</li>
						<li>Full-stack developer</li>
						<li>Machine learning engineer</li>
						<li>Data scientist</li>
						<li>Data analyst</li>
						<li>Data engineer</li>
						<li>DevOps engineer</li>
						<li>Software engineer</li>
						<li>Many more other roles</li>
					</ul>
					<h2>Characteristics of Python</h2>
					<p>Following are important characteristics of
						<b>Python Programming</b>
						−</p>
					<ul>
						<li>It supports functional and structured programming methods as well as OOP.</li>
						<li>It can be used as a scripting language or can be compiled to byte-code for building large applications.</li>
						<li>It provides very high-level dynamic data types and supports dynamic type checking.</li>
						<li>It supports automatic garbage collection.</li>
						<li>It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.</li>
					</ul>
					<h2>Applications of Python</h2>
					<p>The latest release of Python is 3.x. As mentioned before, Python is one of the most widely used language over the web. I'm going to list few of them here:</p>
					<ul>
						<li>
							<b>Easy-to-learn</b>
							− Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly.</li>
						<li>
							<b>Easy-to-read</b>
							− Python code is more clearly defined and visible to the eyes.</li>
						<li>
							<b>Easy-to-maintain</b>
							− Python's source code is fairly easy-to-maintain.</li>
						<li>
							<b>A broad standard library</b>
							− Python's bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.</li>
						<li>
							<b>Interactive Mode</b>
							− Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.</li>
						<li>
							<b>Portable</b>
							− Python can run on a wide variety of hardware platforms and has the same interface on all platforms.</li>
						<li>
							<b>Extendable</b>
							− You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.</li>
						<li>
							<b>Databases</b>
							− Python provides interfaces to all major commercial databases.</li>
						<li>
							<b>GUI Programming</b>
							− Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.</li>
						<li>
							<b>Scalable</b>
							− Python provides a better structure and support for large programs than shell scripting.</li>
					</ul>


				</div>


				<div class="col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content" id="mainContent">
					<h1>Python - Basic Syntax</h1>

					<div class="clearer"></div>
					<p>The Python syntax defines a set of rules that are used to create Python statements while writing a Python Program. The Python Programming Language Syntax has many similarities to Perl, C, and Java Programming Languages. However, there are some definite differences between the languages.</p>

					<h2>First Python Program</h2>
					<p>Let us execute a Python "Hello, World!" Programs in different modes of programming.</p>

					<h3>Python - Interactive Mode Programming</h3>
					<p>We can invoke a Python interpreter from command line by typing
						<b>python</b>
						at the command prompt as following −</p>
					<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">$ python
    </span><span class="typ">Python</span><span class="pln"> </span><span class="lit">3.6</span><span class="pun">.</span><span class="lit">8</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">default</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Sep</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="lit">2021</span><span class="pun">,</span><span class="pln"> </span><span class="lit">09</span><span class="pun">:</span><span class="lit">13</span><span class="pun">:</span><span class="lit">53</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">[</span><span class="pln">GCC </span><span class="lit">8.5</span><span class="pun">.</span><span class="lit">0</span><span class="pln"> </span><span class="lit">20210514</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Red</span><span class="pln"> </span><span class="typ">Hat</span><span class="pln"> </span><span class="lit">8.5</span><span class="pun">.</span><span class="lit">0</span><span class="pun">-</span><span class="lit">3</span><span class="pun">)]</span><span class="pln"> on linux
    </span><span class="typ">Type</span><span class="pln"> </span><span class="str">"help"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"copyright"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"credits"</span><span class="pln"> </span><span class="kwd">or</span><span class="pln"> </span><span class="str">"license"</span><span class="pln"> </span><span class="kwd">for</span><span class="pln"> more information</span><span class="pun">.</span><span class="pln">
    </span><span class="pun">&gt;&gt;&gt;</span></pre>
					<p>Here
						<b>&gt;&gt;&gt;</b>
						denotes a Python Command Prompt where you can type your commands. Let's type the following text at the Python prompt and press the Enter −</p>
					<pre class="prettyprint notranslate prettyprinted" style=""><span class="pun">&gt;&gt;&gt;</span><span class="pln"> </span><span class="kwd">print</span><span class="pln"> </span><span class="pun">(</span><span class="str">"Hello, World!"</span><span class="pun">)</span></pre>
					<p>If you are running older version of Python, like Python 2.4.x, then you would need to use print statement without parenthesis as in
						<b>print "Hello, World!"</b>. However in Python version 3.x, this produces the following result −</p>
					<pre class="result notranslate">Hello, World!
    </pre>
					<h3>Python - Script Mode Programming</h3>
					<p>We can invoke the Python interpreter with a script parameter which begins the execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.</p>
					<p>Let us write a simple Python program in a script which is simple text file. Python files have extension
						<b>.py</b>. Type the following source code in a
						<b>test.py</b>
						file −</p>
					<pre class="demo-code notranslate  language-python" data-lang="python3" data-index="0" id="0" tabindex="0"><div class="execute"></div><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>
    </div><div class="output-wrapper"><div class="console-close"></div><div class="code-output"></div></div></pre>
					<p>We assume that you have Python interpreter path set in PATH variable. Now, let's try to run this program as follows −</p>
					<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">$ python test</span><span class="pun">.</span><span class="pln">py</span></pre>
					<p>This produces the following result −</p>
					<pre class="result notranslate">Hello, World!
    </pre>
					<p>Let us try another way to execute a Python script. Here is the modified test.py file −</p>
					<pre class="demo-code notranslate  language-python" data-lang="python3" data-index="1" id="1" tabindex="0"><div class="execute"></div><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token comment">#!/usr/bin/python</span>

    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>
    </div><div class="output-wrapper"><div class="console-close"></div><div class="code-output"></div></div></pre>
					<p>We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows −</p>
					<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">$ chmod </span><span class="pun">+</span><span class="pln">x test</span><span class="pun">.</span><span class="pln">py     </span><span class="com"># This is to make file executable</span><span class="pln">
    $</span><span class="pun">./</span><span class="pln">test</span><span class="pun">.</span><span class="pln">py</span></pre>
					<p>This produces the following result −</p>
					<pre class="result notranslate">Hello, World!
    </pre>
					<h2>Python Identifiers</h2>
					<p>A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).</p>
					<p>Python does not allow punctuation characters such as @, $, and % within identifiers.</p>
					<blockquote>Python is a case sensitive programming language. Thus,
						<b>Manpower</b>
						and
						<b>manpower</b>
						are two different identifiers in Python.</blockquote>

					<p>Here are naming conventions for Python identifiers −</p>
					<ul class="list">
						<li>
							<p>Python Class names start with an uppercase letter. All other identifiers start with a lowercase letter.</p>
						</li>
						<li>
							<p>Starting an identifier with a single leading underscore indicates that the identifier is
								<b>private</b>
								identifier.</p>
						</li>
						<li>
							<p>Starting an identifier with two leading underscores indicates a strongly
								<b>private</b>
								identifier.</p>
						</li>
						<li>
							<p>If the identifier also ends with two trailing underscores, the identifier is a
								<b>language-defined</b>
								special name.</p>
						</li>
					</ul>
					<h2>Python Reserved Words</h2>
					<p>The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only.</p>
					<table class="table table-bordered" style="text-align:center;">
						<tbody>
							<tr>
								<td>and</td>
								<td>as</td>
								<td>assert</td>
							</tr>
							<tr>
								<td>break</td>
								<td>class</td>
								<td>continue</td>
							</tr>
							<tr>
								<td>def</td>
								<td>del</td>
								<td>elif</td>
							</tr>
							<tr>
								<td>else</td>
								<td>except</td>
								<td>False</td>
							</tr>
							<tr>
								<td>finally</td>
								<td>for</td>
								<td>from</td>
							</tr>
							<tr>
								<td>global</td>
								<td>if</td>
								<td>import</td>
							</tr>
							<tr>
								<td>in</td>
								<td>is</td>
								<td>lambda</td>
							</tr>
							<tr>
								<td>None</td>
								<td>nonlocal</td>
								<td>not</td>
							</tr>
							<tr>
								<td>or</td>
								<td>pass</td>
								<td>raise
								</td>
							</tr>
							<tr>
								<td>return</td>
								<td>True</td>
								<td>try</td>
							</tr>
							<tr>
								<td>while</td>
								<td>with</td>
								<td>yield</td>
							</tr>
						</tbody>
					</table>
					<h2>Python Lines and Indentation</h2>
					<p>Python programming provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by
						<b>line indentation</b>, which is rigidly enforced.</p>
					<p>The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>
    </div></pre>
					<p>However, the following block generates an error −</p>
					<pre class="demo-code notranslate  language-python" data-lang="python3" data-index="2" id="2" tabindex="0"><div class="execute"></div><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>
    </div><div class="output-wrapper"><div class="console-close"></div><div class="code-output"></div></div></pre>
					<p>Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks −</p>
					<blockquote>Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces.</blockquote>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token keyword">import</span> sys

    <span class="token keyword">try</span><span class="token punctuation">:</span>
       <span class="token comment"># open file stream</span>
       <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
       <span class="token keyword">print</span> <span class="token string">"There was an error writing to"</span><span class="token punctuation">,</span> file_name
       sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token string">"Enter '"</span><span class="token punctuation">,</span> file_finish<span class="token punctuation">,</span>
    <span class="token keyword">print</span> <span class="token string">"' When finished"</span>
    <span class="token keyword">while</span> file_text <span class="token operator">!=</span> file_finish<span class="token punctuation">:</span>
       file_text <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"Enter text: "</span><span class="token punctuation">)</span>
       <span class="token keyword">if</span> file_text <span class="token operator">==</span> file_finish<span class="token punctuation">:</span>
          <span class="token comment"># close the file</span>
          <span class="token builtin">file</span><span class="token punctuation">.</span>close
          <span class="token keyword">break</span>
       <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_text<span class="token punctuation">)</span>
       <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    file_name <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"Enter filename: "</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span> <span class="token string">"Next time please enter something"</span>
       sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
       <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
       <span class="token keyword">print</span> <span class="token string">"There was an error reading file"</span>
       sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    file_text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> file_text
    </div></pre>
					<h2>Python Multi-Line Statements</h2>
					<p>Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\) to denote that the line should continue. For example −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \
            item_two <span class="token operator">+</span> \
            item_three
    </div></pre>
					<p>Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example following statement works well in Python −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;">days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span>
            <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span>
    </div></pre>
					<h2>Quotations in Python</h2>
					<p>Python accepts single ('), double (") and triple (''' or """) quotes to denote string literals, as long as the same type of quote starts and ends the string.</p>
					<p>The triple quotes are used to span the string across multiple lines. For example, all the following are legal −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;">word <span class="token operator">=</span> <span class="token string">'word'</span>

    sentence <span class="token operator">=</span> <span class="token string">"This is a sentence."</span>

    paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""This is a paragraph. It is
     made up of multiple lines and sentences."""</span>
    </div></pre>
					<h2>Comments in Python</h2>
					<p>A comment is a programmer-readable explanation or annotation in the Python source code. They are added with the purpose of making the source code easier for humans to understand, and are ignored by Python interpreter</p>
					<p>Just like most modern languages, Python supports single-line (or end-of-line) and multi-line (block) comments. Python comments are very much similar to the comments available in PHP, BASH and Perl Programming languages.</p>

					<p>A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.</p>

					<pre class="demo-code notranslate  language-python" data-lang="python3" data-index="3" id="3" tabindex="0"><div class="execute"></div><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token comment"># First comment</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span> <span class="token comment"># Second comment</span>
    </div><div class="output-wrapper"><div class="console-close"></div><div class="code-output"></div></div></pre>
					<p>This produces the following result −</p>
					<pre class="result notranslate">Hello, World!
    </pre>
					<p>You can type a comment on the same line after a statement or expression −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;">name <span class="token operator">=</span> <span class="token string">"Madisetti"</span> <span class="token comment"># This is again comment</span>
    </div></pre>
					<p>You can comment multiple lines as follows −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token comment"># This is a comment.</span>
    <span class="token comment"># This is a comment, too.</span>
    <span class="token comment"># This is a comment, too.</span>
    <span class="token comment"># I said that already.</span>
    </div></pre>
					<p>Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments:</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token triple-quoted-string string">'''
    This is a multiline
    comment.
    '''</span>
    </div></pre>
					<h2>Using Blank Lines in Python Programs</h2>
					<p>A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.</p>
					<p>In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.</p>
					<h2>Waiting for the User</h2>
					<p>The following line of the program displays the prompt, the statement saying “Press the enter key to exit”, and waits for the user to take action −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token comment">#!/usr/bin/python</span>

    <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"\n\nPress the enter key to exit."</span><span class="token punctuation">)</span>
    </div></pre>
					<p>Here, "\n\n" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.</p>
					<h2>Multiple Statements on a Single Line</h2>
					<p>The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon −</p>
					<pre class="demo-code notranslate  language-python" data-lang="python3" data-index="4" id="4" tabindex="0"><div class="execute"></div><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
    </div><div class="output-wrapper"><div class="console-close"></div><div class="code-output"></div></div></pre>
					<h2>Multiple Statement Groups as Suites</h2>
					<p>A group of individual statements, which make a single code block are called
						<b>suites</b>
						in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.</p>
					<p>Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example −</p>
					<pre class="just-code notranslate  language-python" data-lang="python3" tabindex="0"><div class="code-mirror  language-python" contenteditable="plaintext-only" spellcheck="false" style="outline: none; overflow-wrap: break-word; overflow-y: auto; white-space: pre-wrap;"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>
       suite
    <span class="token keyword">elif</span> expression <span class="token punctuation">:</span>
       suite
    <span class="token keyword">else</span> <span class="token punctuation">:</span>
       suite
    </div></pre>
					<h2>Command Line Arguments in Python</h2>
					<p>Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h −</p>
					<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">$ python </span><span class="pun">-</span><span class="pln">h
    usage</span><span class="pun">:</span><span class="pln"> python </span><span class="pun">[</span><span class="pln">option</span><span class="pun">]</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">[-</span><span class="pln">c cmd </span><span class="pun">|</span><span class="pln"> </span><span class="pun">-</span><span class="pln">m mod </span><span class="pun">|</span><span class="pln"> file </span><span class="pun">|</span><span class="pln"> </span><span class="pun">-]</span><span class="pln"> </span><span class="pun">[</span><span class="pln">arg</span><span class="pun">]</span><span class="pln"> </span><span class="pun">...</span><span class="pln">
    </span><span class="typ">Options</span><span class="pln"> </span><span class="kwd">and</span><span class="pln"> arguments </span><span class="pun">(</span><span class="kwd">and</span><span class="pln"> corresponding environment variables</span><span class="pun">):</span><span class="pln">
    </span><span class="pun">-</span><span class="pln">c cmd </span><span class="pun">:</span><span class="pln"> program passed </span><span class="kwd">in</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">(</span><span class="pln">terminates option list</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">-</span><span class="pln">d     </span><span class="pun">:</span><span class="pln"> debug output </span><span class="kwd">from</span><span class="pln"> parser </span><span class="pun">(</span><span class="pln">also PYTHONDEBUG</span><span class="pun">=</span><span class="pln">x</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">-</span><span class="pln">E     </span><span class="pun">:</span><span class="pln"> ignore environment variables </span><span class="pun">(</span><span class="pln">such </span><span class="kwd">as</span><span class="pln"> PYTHONPATH</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">-</span><span class="pln">h     </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">print</span><span class="pln"> </span><span class="kwd">this</span><span class="pln"> help message </span><span class="kwd">and</span><span class="pln"> </span><span class="kwd">exit</span><span class="pln">

    </span><span class="pun">[</span><span class="pln"> etc</span><span class="pun">.</span><span class="pln"> </span><span class="pun">]</span></pre>
					<p>You can also program your script in such a way that it should accept various options.
						<a href="/python/python_command_line_arguments.htm">Command Line Arguments</a>
						is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts.</p>


				</div>


				<div class="col-sm-12 col-md-8 col-xl-6 rounded-3 tutorial-content" id="mainContent">
					<h1>Python - Loops</h1>

					<div class="clearer"></div>
					<p>In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times.</p>
					<p>Programming languages provide various control structures that allow for more complicated execution paths.</p>
					<p>A loop statement allows us to execute a statement or group of statements multiple times. The following diagram illustrates a loop statement −</p>

					<p>Python programming language provides following types of loops to handle looping requirements.</p>
					<table class="table table-bordered">
						<tbody>
							<tr>
								<th style="text-align:center;">Sr.No.</th>
								<th style="text-align:center;">Loop Type &amp; Description</th>
							</tr>
							<tr>
								<td class="ts">1</td>
								<td>
									<a href="/python/python_while_loop.htm" title="WHILE loop in Python">while loop</a>
									<p>Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.</p>
								</td>
							</tr>
							<tr>
								<td class="ts">2</td>
								<td>
									<a href="/python/python_for_loop.htm" title="FOR loop in Python">for loop</a>
									<p>Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p>
								</td>
							</tr>
							<tr>
								<td class="ts">3</td>
								<td>
									<a href="/python/python_nested_loops.htm" title="nested loops in Python">nested loops</a>
									<p>You can use one or more loop inside any another while, for or do..while loop.</p>
								</td>
							</tr>
						</tbody>
					</table>
					<h2>Loop Control Statements</h2>
					<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>
					<p>Python supports the following control statements. Click the following links to check their detail.</p>
					<p>Let us go through the loop control statements briefly</p>
					<table class="table table-bordered">
						<tbody>
							<tr>
								<th style="text-align:center;">Sr.No.</th>
								<th style="text-align:center;">Control Statement &amp; Description</th>
							</tr>
							<tr>
								<td class="ts">1</td>
								<td>
									<a href="/python/python_break_statement.htm" title="break statement in Python">break statement</a>
									<p>Terminates the loop statement and transfers execution to the statement immediately following the loop.</p>
								</td>
							</tr>
							<tr>
								<td class="ts">2</td>
								<td>
									<a href="/python/python_continue_statement.htm" title="continue statement in Python">continue statement</a>
									<p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p>
								</td>
							</tr>
							<tr>
								<td class="ts">3</td>
								<td>
									<a href="/python/python_pass_statement.htm" title="pass statement in Python">pass statement</a>
									<p>The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.</p>
								</td>
							</tr>
						</tbody>
					</table>

				</div>
			</div>
			<div class="contentLink"></div>
		</div>
	</div>

	{# <div class = "blogContent" id = "blogContent">
	    <div class = "m-5">
	      {% if courseBlogging is defined %}
	        {% for details in courseBlogging %}
	          <div class = "blogInfo mb-5">
	            <div class = "blogContent">
	              <div class = "contentDesc">
	                {{details.contentDesc}}
	              </div>
	             <h6 class = "pt-2">Author of this blog : {{details.authorName}}</h6>
	            </div>

	            <div class = "blogFile">
	              <div>
	                {% if details.fileType is same as("video/mp4") %}
	                <video width="100%%" height="200" controls>
	                  <source src="/{{details.contentFile}}" type="video/mp4">
	                </video>

	                {% elseif details.fileType is same as("audio/mpeg") %}
	                  <audio controls>
	                    <source src="/{{details.contentFile}}" type="audio/mpeg">
	                      Your browser does not support the audio element.
	                  </audio>

	                {% else %}
	                  <img src="{{details.contentFile}}" alt="" width = "100%" height = "200">

	                {% endif %}
	              </div>
	              <div>
	                <a href="{{details.contentLink}}">Use fulll link</a>
	              </div>
	            </div>
	          </div>
	        {% endfor %}
	      {% endif %}
	    </div>
	  </div> #}

	<div>
		<div class="faqContent" id="faqContent"></div>
	</div>
{% endblock %}
